#!/usr/bin/env python3
"""Interactive URDF visualizer for generated heroes.

This script provides a command-line interface to visualize heroes generated by
the Tung Playground pipeline using an interactive web-based viewer powered by viser.

Usage:
    python examples/visualize_hero.py tung_sahur_demo
    python examples/visualize_hero.py --list
    python examples/visualize_hero.py tung_sahur_demo --port 8081
"""

import sys
from pathlib import Path
from typing import Optional, List
import typer
from rich.console import Console
from rich.table import Table

# Add src to path for development
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

import tung_playground as tp


console = Console()
app = typer.Typer(
    name="visualize_hero",
    help="Interactive URDF visualizer for generated heroes.",
    add_completion=False,
)


def get_heroes_dir() -> Path:
    """Get the heroes directory path."""
    return Path("heroes")


def list_available_heroes() -> List[str]:
    """List all available heroes with URDF files."""
    heroes_dir = get_heroes_dir()
    if not heroes_dir.exists():
        return []
    
    heroes = []
    for hero_dir in heroes_dir.iterdir():
        if hero_dir.is_dir():
            urdf_file = hero_dir / "robot.urdf"
            if urdf_file.exists():
                heroes.append(hero_dir.name)
    
    return sorted(heroes)


def load_hero_by_name(hero_name: str) -> Optional[tp.Hero]:
    """Load a hero by name from the heroes directory.
    
    Args:
        hero_name: Name of the hero to load.
        
    Returns:
        Hero instance or None if not found.
    """
    heroes_dir = get_heroes_dir()
    hero_dir = heroes_dir / hero_name
    
    if not hero_dir.exists():
        return None
    
    # Check for hero metadata file
    metadata_file = hero_dir / "hero.json"
    if metadata_file.exists():
        try:
            return tp.Hero.load(metadata_file)
        except Exception as e:
            console.print(f"[yellow]Warning: Could not load hero metadata: {e}[/yellow]")
    
    # Create hero manually if metadata doesn't exist
    hero = tp.Hero(name=hero_name, hero_dir=hero_dir)
    
    # Set assets if they exist
    urdf_file = hero_dir / "robot.urdf"
    if urdf_file.exists():
        hero.assets.set_asset(tp.AssetType.URDF, urdf_file)
    
    mesh_file = hero_dir / "generated_mesh.obj"
    if mesh_file.exists():
        hero.assets.set_asset(tp.AssetType.MESH_3D, mesh_file)
    
    skeleton_file = hero_dir / "skeleton.json"
    if skeleton_file.exists():
        hero.assets.set_asset(tp.AssetType.SKELETON, skeleton_file)
    
    return hero


@app.command()
def main(
    hero_name: Optional[str] = typer.Argument(None, help="Name of the hero to visualize"),
    list_heroes: bool = typer.Option(False, "--list", "-l", help="List available heroes"),
    port: int = typer.Option(8080, "--port", "-p", help="Port for the visualization server"),
    host: str = typer.Option("localhost", "--host", "-h", help="Host for the visualization server"),
    non_blocking: bool = typer.Option(False, "--non-blocking", "-n", help="Run server in non-blocking mode"),
) -> None:
    """Visualize a hero's URDF model interactively."""
    
    # Check if visualization is available
    if not tp.VISUALIZATION_AVAILABLE:
        console.print(
            "[red]‚ùå Visualization dependencies not found![/red]\n"
            "Install with: [bold]pip install tung_playground[vis][/bold]"
        )
        sys.exit(1)
    
    # List available heroes if requested
    if list_heroes:
        heroes = list_available_heroes()
        
        if not heroes:
            console.print("[yellow]No heroes with URDF files found in the heroes directory.[/yellow]")
            return
        
        table = Table(title="Available Heroes")
        table.add_column("Hero Name", style="cyan")
        table.add_column("URDF File", style="green")
        table.add_column("Status", style="magenta")
        
        for hero_name in heroes:
            hero_dir = get_heroes_dir() / hero_name
            urdf_file = hero_dir / "robot.urdf"
            
            # Check if hero has complete assets
            status_parts = []
            if (hero_dir / "generated_mesh.obj").exists():
                status_parts.append("mesh")
            if (hero_dir / "skeleton.json").exists():
                status_parts.append("skeleton")
            if (hero_dir / "parts").exists():
                status_parts.append("parts")
            
            status = ", ".join(status_parts) if status_parts else "basic"
            
            table.add_row(
                hero_name,
                "‚úÖ robot.urdf",
                status
            )
        
        console.print(table)
        return
    
    # Validate hero name
    if not hero_name:
        console.print("[red]‚ùå Hero name is required![/red]")
        console.print("Use [bold]--list[/bold] to see available heroes.")
        sys.exit(1)
    
    # Load hero
    console.print(f"[cyan]üîç Loading hero: {hero_name}[/cyan]")
    hero = load_hero_by_name(hero_name)
    
    if not hero:
        console.print(f"[red]‚ùå Hero '{hero_name}' not found![/red]")
        available_heroes = list_available_heroes()
        if available_heroes:
            console.print("Available heroes:")
            for h in available_heroes:
                console.print(f"  ‚Ä¢ {h}")
        sys.exit(1)
    
    # Check if hero has URDF
    if not hero.assets.has_asset(tp.AssetType.URDF):
        console.print(f"[red]‚ùå Hero '{hero_name}' does not have a URDF file![/red]")
        sys.exit(1)
    
    # Start visualization
    console.print(f"[green]üöÄ Starting visualization server...[/green]")
    console.print(f"[blue]üì° Server URL: http://{host}:{port}[/blue]")
    console.print(f"[yellow]üí° Open the URL in your browser to view the interactive visualization[/yellow]")
    
    if not non_blocking:
        console.print(f"[dim]Press Ctrl+C to stop the server[/dim]")
    
    try:
        # Use the hero's visualize method
        visualizer = hero.visualize(port=port, host=host, blocking=not non_blocking)
        
        if non_blocking:
            console.print(f"[green]‚úÖ Visualization server started in background[/green]")
            console.print(f"[yellow]Call visualizer.stop() to stop the server[/yellow]")
        
    except ImportError as e:
        console.print(f"[red]‚ùå Visualization error: {e}[/red]")
        sys.exit(1)
    except ValueError as e:
        console.print(f"[red]‚ùå Validation error: {e}[/red]")
        sys.exit(1)
    except KeyboardInterrupt:
        console.print(f"\n[yellow]üëã Visualization server stopped[/yellow]")
    except Exception as e:
        console.print(f"[red]‚ùå Unexpected error: {e}[/red]")
        sys.exit(1)


if __name__ == "__main__":
    app()